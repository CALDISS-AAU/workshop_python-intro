<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data- og kontrolstrukturer on Introduction to Python for Social Science</title><link>/data-/</link><description>Recent content in Data- og kontrolstrukturer on Introduction to Python for Social Science</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/data-/index.xml" rel="self" type="application/rss+xml"/><item><title>Lister og tuples</title><link>/data-/lister/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/data-/lister/</guid><description>Lister Den mest basale datastruktur er en liste. En liste defineres med []:
my_list = [2, 7, 9, 10] I ovenstående defineres listen my_list til at indeholde værdierne 2, 7, 9 og 10. En liste kan fremkaldes ligesom hvilken som helst anden variabel:
print(my_list) [2, 7, 9, 10] En liste er blot en beholder af forskellige variable. Lister kan derfor indeholde variable af forskellig typer:
my_list2 = [2, &amp;#34;hello&amp;#34;, 10, True] print(my_list2) [2, 'hello', 10, True] Lister kan også indeholde andre lister:</description></item><item><title>Dictionaries</title><link>/data-/dictionaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/data-/dictionaries/</guid><description>Man kan også lagre flere værdier i Python med dictionaries. Dictionaries består af en række sæt af nøgler og værdier.
Dictionaries defineres med {}:
my_dict = {&amp;#34;jedi&amp;#34;: &amp;#34;Katarn&amp;#34;, &amp;#34;sith&amp;#34;: &amp;#34;Desann&amp;#34;} Hvert nøgle- og værdisæt defineres med en nøgle i form af en string efterfulgt af værdien efter :. Værdien kan være tal, tekst, liste, en anden dictionary osv.
De forskellige nøgle- og værdisæt adskilles med ,.
Dictionaries har ikke et index, da Python ikke betragter dem som værende i en bestemt rækkefølge.</description></item><item><title>Loops</title><link>/data-/loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/data-/loops/</guid><description>I arbejdet med dataanalyse udfører man ofte de samme kommandoer, kontroller, kørsler osv. igen og igen:
En række oplysninger kan kontrolleres, om de er korrekte. Har de den rigtige type? Er værdierne gyldige? (fx at aldersværdier ikke har skøre værdier som 987 år). Den samme beregning skal foretages for en række oplysninger - fx udregning af gennemsnit for indkomst, alder, år i arbejde osv. De samme oplysninger skal hentes fra en række forskellige kilder (filer, hjemmesider eller andet).</description></item><item><title>If-betingelser</title><link>/data-/if-betingelser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/data-/if-betingelser/</guid><description>Når man arbejder med Python, kan det ofte være brugbart at sætte if-betingelser i sin kode. If-betingelser er kodestumper, hvor visse kommandoer kun udføres, hvis en betingelse er opfyldt:
x = 12 if x &amp;gt; 10: print(&amp;#34;Tallet er større end 10!&amp;#34;) else: print(&amp;#34;Tallet er ikke større end 10!&amp;#34;) Tallet er større end 10! Ovenstående kode består af to blokke: en if-blok og en else-blok.
I koden evalueres først if-betingelsen: x &amp;gt; 10.</description></item><item><title>Hyppige fejltyper</title><link>/data-/hyppige/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/data-/hyppige/</guid><description>Man vil uundgåeligt få fejl, når man arbejder med Python. Som nævnt er Python et meget bogstaveligt sprog, så der skal ikke meget til for, at Python giver en fejlbesked.
Pythons fejlbeskeder er meget detaljerede, men kan være svære at gennemskue - særligt hvis man er ny til Python. Dog kan selve fejltypen hjælpe os til at finde ud af, hvad der er galt med vores kode.
Herunder gennemgås de hyppigste fejltyper, og hvad de dækker over.</description></item></channel></rss>