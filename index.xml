<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction to Python for Social Science</title><link>/</link><description>Recent content on Introduction to Python for Social Science</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>At arbejde med et programmeringssprog</title><link>/hvad/at/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/hvad/at/</guid><description>youtube IAd4VwiFXl0 &amp;gt;}}
Python er et programmeringssprog. At arbejde med Python kræver derfor, at man &amp;ldquo;taler&amp;rdquo; det rette sprog, når man gerne vil have Python til at gøre noget.
I bruger uden tvivl forskellige programmer, apps og softwareløsninger i jeres hverdag til forskellige ting. Disse er alle opbygget af kode skrevet i et programmeringssprog, men de leveres altid med en eller anden form for &amp;ldquo;brugerflade&amp;rdquo;; altså en måde vi kan bruge programmet ved at trykke på knapper og lignende, uden at skulle kende til den måde, som programmet er opbygget.</description></item><item><title>Lister og tuples</title><link>/arbejd/lister/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/arbejd/lister/</guid><description>youtube mXQXpWdLFvI &amp;gt;}}
Lister Den mest basale datastruktur er en liste. En liste defineres med []:
my_list = [2, 7, 9, 10] I ovenstående defineres listen my_list til at indeholde værdierne 2, 7, 9 og 10. En liste kan fremkaldes ligesom hvilken som helst anden variabel:
print(my_list) [2, 7, 9, 10] En liste er blot en beholder af forskellige variable. Lister kan derfor indeholde variable af forskellig typer:
my_list2 = [2, &amp;#34;hello&amp;#34;, 10, True] print(my_list2) [2, 'hello', 10, True] Lister kan også indeholde andre lister:</description></item><item><title>Python IDE'er</title><link>/supplerende/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/supplerende/python/</guid><description>Der findes mange måder at arbejde med Python. Her er blot tre forslag til IDE&amp;rsquo;er (&amp;ldquo;Integrated development environment&amp;rdquo;).
Jupyter Notebook Med Jupyter Notebook arbejder man med Python i celler. Det egner sig især til kortere kodestykker, hvor der skal kommenteres undervejs. Det er muligt at kombinere Python kode med normale tekstceller.
Jupyter Notebook tillader både en meget interaktiv måde at arbejde med Python samt nemme løsninger til at lave samlede rapporter og dokumenter, hvor kode, beskrivelse og output kombineres.</description></item><item><title>Python sproget</title><link>/fundamentale/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/python/</guid><description>youtube 1iD74PlcMUw &amp;gt;}}
Som nævnt arbejder man med Python ved at skrive kommandoer i Python sproget. Kommandoer bliver &amp;ldquo;evalueret&amp;rdquo; af fortolkeren. Hvis koden forstås, bliver den kørt, og der gives et output, en ændring eller andet afhængigt af, hvad man beder om.
Hvis man fx skriver en kommando besteånde af matematiske operationer i Python, vil man få resultatet tilbage som output:
2 + 5 7 7 * 6 42 923 / 45 20.</description></item><item><title>Dictionaries</title><link>/arbejd/dictionaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/arbejd/dictionaries/</guid><description>youtube ZW_chK-cDlM &amp;gt;}}
Man kan også lagre flere værdier i Python med dictionaries. Dictionaries består af en række sæt af nøgler og værdier.
Dictionaries defineres med {}:
my_dict = {&amp;#34;jedi&amp;#34;: &amp;#34;Katarn&amp;#34;, &amp;#34;sith&amp;#34;: &amp;#34;Desann&amp;#34;} Hvert nøgle- og værdisæt defineres med en nøgle i form af en string efterfulgt af værdien efter :. Værdien kan være tal, tekst, liste, en anden dictionary osv.
De forskellige nøgle- og værdisæt adskilles med ,.
Dictionaries har ikke et index, da Python ikke betragter dem som værende i en bestemt rækkefølge.</description></item><item><title>Interager med Python</title><link>/hvad/interager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/hvad/interager/</guid><description>youtube IghykgHjDh0 &amp;gt;}}
For at bruge Python skal vi &amp;ldquo;tale&amp;rdquo; Python. Man arbejder med Python ved at skrive kommandoer i Python-sproget. Hvis Python forstår din kommando udføres den. Hvis ikke, får du en eller anden form for fejl. Man kan se Python som et meget bogstaveligt og pernitten sprog: Kommandoer skal skrives på helt bestemte måder for at Python kan forstå, hvad du gerne vil.
Barberes Python ned til sine grundsten består det ikke af mere end en &amp;ldquo;interpreter&amp;rdquo; (fortolker).</description></item><item><title>Serverløsninger til Python</title><link>/supplerende/serverl%C3%A3sninger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/supplerende/serverl%C3%A3sninger/</guid><description>Der findes adskillige online løsninger til at arbejde med Python. På den måde slipper man for selv at skulle sætte det op, og man vil ofte have mere computerkraft til rådighed, end man har på sin egen computer.
Google Colab
Google Colab fungerer ligesom en online version af Jupyter Notebook. Her kan man skrive notebooks, som man gør i Jupyter Notebook, men køre dem over Google&amp;rsquo;s servere. Det kræver en Google konto for at bruge.</description></item><item><title>Variable</title><link>/fundamentale/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/variable/</guid><description>youtube tNmobEPK_uU&amp;gt;}}
Python er et objekt-orienteret programmeringssprog. Dette indebærer, at man kontinuerligt arbejder med forskellige objekter, som indeholder en eller anden for for information.
En basal form for objekter i Python er &amp;ldquo;variable&amp;rdquo;. Dette er ikke at forveksle med en variabel, som forstået i statistik som en egenskab ved en observation, da en variabel i Python blot er en beholder for en eller anden form for information.
Alle disse kan være variable i Python:</description></item><item><title>Litteratur og yderligere materiale</title><link>/supplerende/litteratur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/supplerende/litteratur/</guid><description>Her ses forslag til steder, hvor du kan lære mere om basal brug af Python.
Online kurser &amp;ldquo;Python for Everybody&amp;rdquo; af Charles R. Severance: https://www.py4e.com/ &amp;ldquo;Data Analysis and Visualization with Python for Social Scientists alpha&amp;rdquo; af DataCarpentry: https://datacarpentry.org/python-socialsci/ &amp;ldquo;Python Tutorial&amp;rdquo; af Tutorialspoint: https://www.tutorialspoint.com/python/index.htm &amp;ldquo;Introduction to Python&amp;rdquo; af DataCamp: https://www.datacamp.com/courses/intro-to-python-for-data-science (betalingsside, men første del er gratis)</description></item><item><title>Loops</title><link>/arbejd/loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/arbejd/loops/</guid><description>youtube mH_EWKqdo88 &amp;gt;}}
I arbejdet med dataanalyse udfører man ofte de samme kommandoer, kontroller, kørsler osv. igen og igen:
En række oplysninger kan kontrolleres, om de er korrekte. Har de den rigtige type? Er værdierne gyldige? (fx at aldersværdier ikke har skøre værdier som 987 år). Den samme beregning skal foretages for en række oplysninger - fx udregning af gennemsnit for indkomst, alder, år i arbejde osv. De samme oplysninger skal hentes fra en række forskellige kilder (filer, hjemmesider eller andet).</description></item><item><title>Typer</title><link>/fundamentale/typer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/typer/</guid><description>youtube ranfUBt6538 &amp;gt;}}
En variabel er ikke bare en variabel i Python. Fordi en variabel kan være så mange ting, så er Python nødt til at kunne adskille variable fra hinanden. Dette gøres ved at variable lagres som en bestemt type.
Typen af variabel fortæller Python, hvad det er for en slags information, som variablen indeholder, og sætter betingelserne for, hvad der kan lade sig gøre med variablen.
Som man arbejder med Python, vil man støde på mange forskellige typer.</description></item><item><title>Funktioner</title><link>/fundamentale/funktioner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/funktioner/</guid><description>youtube pKID5oLWy5k &amp;gt;}}
En central del af det at arbejde med et programmeringssprog er at bruge funktioner. Funktioner tager et eller flere input (kaldet &amp;ldquo;argumenter&amp;rdquo;), foretager et eller andet med disse og returnerer (for det meste) et output.
Funktioner i Python har følgende format:
function(argument1, argument2, ...) Funktioner bruges ved at skrive funktionens navn efterfulgt af argumenterne i parentes. Hvert argument adskilles med et komma (,). En funktion kan have et utal af argumenter, men oftest skal de som minimum have en eller flere variable som input.</description></item><item><title>If-betingelser</title><link>/arbejd/if-betingelser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/arbejd/if-betingelser/</guid><description>youtube zaJBdItYYPs &amp;gt;}}
Når man arbejder med Python, kan det ofte være brugbart at sætte if-betingelser i sin kode. If-betingelser er kodestumper, hvor visse kommandoer kun udføres, hvis en betingelse er opfyldt:
x = 12 if x &amp;gt; 10: print(&amp;#34;Tallet er større end 10!&amp;#34;) else: print(&amp;#34;Tallet er ikke større end 10!&amp;#34;) Tallet er større end 10! Ovenstående kode består af to blokke: en if-blok og en else-blok.
I koden evalueres først if-betingelsen: x &amp;gt; 10.</description></item><item><title>Hyppige fejltyper</title><link>/arbejd/hyppige/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/arbejd/hyppige/</guid><description>Man vil uundgåeligt få fejl, når man arbejder med Python. Som nævnt er Python et meget bogstaveligt sprog, så der skal ikke meget til for, at Python giver en fejlbesked.
Pythons fejlbeskeder er meget detaljerede, men kan være svære at gennemskue - særligt hvis man er ny til Python. Dog kan selve fejltypen hjælpe os til at finde ud af, hvad der er galt med vores kode.
Herunder gennemgås de hyppigste fejltyper, og hvad de dækker over.</description></item><item><title>Metoder</title><link>/fundamentale/metoder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/metoder/</guid><description>youtube xOz52Dmn-GY &amp;gt;}}
Udover funktioner i Python findes der også &amp;ldquo;metoder&amp;rdquo;. Lig funktioner tager metoder også en form for input og returnerer et output.
I modsætning til funktioner er metoder bundet op på bestemte variabeltyper (eller rettere en bestemt &amp;ldquo;class&amp;rdquo;). Det vil sige at variablen skal være en bestemt type for, at metoden kan bruges. Metoder kaldes med variabel.method(option1 = something). Tekstværdier (strings) har fx en række metoder tilknyttet til at ændre teksten:</description></item><item><title>Classes</title><link>/fundamentale/classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/classes/</guid><description>Tidligere i dette materiale blev det forklaret, hvordan Python adskiller mellem variable gennem variablens type.
Mere specifikt er et objekt i Python altid en eller anden class. En class tillader at både data (attributes) og funktioner (metoder) lagres i et objekt. Når et objekt defineres som fx en string, så er det objekt en &amp;ldquo;string-class&amp;rdquo;, hvilket dikterer, hvad vi kan gøre med objektet (hvilket attributes og metoder, som der er til rådighed).</description></item><item><title>Pakker</title><link>/fundamentale/pakker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/pakker/</guid><description>youtube Nvmy6HD8DJ0 &amp;gt;}}
Pakker i Python er samlinger af funktioner, metoder, værdier osv. Selvom man kan meget i Python, så når man ikke særlig langt uden at importere pakker.
Funktioner, classes, funktioner, værdier osv. fra pakker kan nemt indlæses ved at importere dem. Så snart pakken er importeret, er pakkens indhold tilgængeligt.
Fx kender Python ikke værdien pi med det samme:
print(pi) --------------------------------------------------------------------------- NameError Traceback (most recent call last) &amp;lt;ipython-input-53-9e2d2bd32686&amp;gt; in &amp;lt;module&amp;gt; ----&amp;gt; 1 print(pi) NameError: name 'pi' is not defined Værdien pi er en del af math pakken, så ved at importere pakken, kan man arbejde med værdien:</description></item><item><title>Logiske værdier (booleans)</title><link>/fundamentale/logiske/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fundamentale/logiske/</guid><description>youtube Vm8gu-hJV68 &amp;gt;}}
En stor del af programmeringsarbejde involverer at arbejde med logiske værdier; også kaldt booleanske værdier. Disse lagres som typen bool.
Variable af typen bool kan kun antage værdien sandt (True) eller falsk (False). Python har en række operatorer, som altid returnerer en booleansk værdi:
a = 10 b = 12 a == b False I ovenstående bruges == til at spørge: &amp;ldquo;Er a lig med b?&amp;rdquo; (= bruges selvfølgelig ikke, da denne bruges til at danne variable).</description></item></channel></rss>